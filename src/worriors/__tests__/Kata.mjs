// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest$RescriptMonorepo from "../../bindings/Jest.mjs";
import * as Kata_8$RescriptMonorepo from "../Kata_8.mjs";

describe.only("Cancell all tests", (function () {
        expect(true).toEqual(true);
        
      }));

describe("Test repeatStr functionality", (function () {
        Jest$RescriptMonorepo.it("repeats I six times", (function () {
                expect(Kata_8$RescriptMonorepo.repeatStr(6, "I")).toEqual("IIIIII");
                
              }));
        Jest$RescriptMonorepo.it("repeats Hello five times", (function () {
                expect(Kata_8$RescriptMonorepo.repeatStr(5, "Hello")).toEqual("HelloHelloHelloHelloHello");
                
              }));
        Jest$RescriptMonorepo.it("passes basic tests", (function () {
                expect(Kata_8$RescriptMonorepo.repeatStr(3, "*")).toEqual("***");
                expect(Kata_8$RescriptMonorepo.repeatStr(5, "#")).toEqual("#####");
                expect(Kata_8$RescriptMonorepo.repeatStr(2, "ha ")).toEqual("ha ha ");
                
              }));
        
      }));

describe("\xd0\xa1alculate how many years ago the father was twice as old as his son", (function () {
        Jest$RescriptMonorepo.it("Testing for dad's age: 36 and son's age: 7", (function () {
                expect(Kata_8$RescriptMonorepo.twiceAsOld(36, 7)).toEqual(22);
                
              }));
        Jest$RescriptMonorepo.it("Testing for dad's age: 55 and son's age: 30", (function () {
                expect(Kata_8$RescriptMonorepo.twiceAsOld(55, 30)).toEqual(5);
                
              }));
        Jest$RescriptMonorepo.it("Testing for dad's age: 42 and son's age: 21", (function () {
                expect(Kata_8$RescriptMonorepo.twiceAsOld(42, 21)).toEqual(0);
                
              }));
        Jest$RescriptMonorepo.it("Testing for dad's age: 22 and son's age: 1", (function () {
                expect(Kata_8$RescriptMonorepo.twiceAsOld(22, 1)).toEqual(20);
                
              }));
        Jest$RescriptMonorepo.it("Testing for dad's age: 29 and son's age: 0", (function () {
                expect(Kata_8$RescriptMonorepo.twiceAsOld(29, 0)).toEqual(29);
                
              }));
        
      }));

describe("Multiply", (function () {
        Jest$RescriptMonorepo.it("fixed tests", (function () {
                expect(Kata_8$RescriptMonorepo.multiply(1, 1)).toEqual(1);
                expect(Kata_8$RescriptMonorepo.multiply(2, 1)).toEqual(2);
                expect(Kata_8$RescriptMonorepo.multiply(2, 2)).toEqual(4);
                expect(Kata_8$RescriptMonorepo.multiply(3, 5)).toEqual(15);
                
              }));
        
      }));

describe("Opposite", (function () {
        Jest$RescriptMonorepo.it("returns opposite value", (function () {
                expect(Kata_8$RescriptMonorepo.opposite(1)).toEqual(-1);
                
              }));
        
      }));

describe("evenOrOdd", (function () {
        Jest$RescriptMonorepo.it("returns string about a number parity", (function () {
                expect(Kata_8$RescriptMonorepo.evenOrOdd(2)).toEqual("Even");
                expect(Kata_8$RescriptMonorepo.evenOrOdd(0)).toEqual("Even");
                expect(Kata_8$RescriptMonorepo.evenOrOdd(7)).toEqual("Odd");
                expect(Kata_8$RescriptMonorepo.evenOrOdd(1)).toEqual("Odd");
                
              }));
        
      }));

describe("merge Arrays", (function () {
        Jest$RescriptMonorepo.it("combines two arrays together", (function () {
                expect(Kata_8$RescriptMonorepo.mergeArrays([
                            1,
                            2,
                            3,
                            4
                          ], [
                            5,
                            6,
                            7,
                            8
                          ])).toEqual([
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]);
                expect(Kata_8$RescriptMonorepo.mergeArrays([
                            1,
                            3,
                            5,
                            7,
                            9
                          ], [
                            10,
                            8,
                            6,
                            4,
                            2
                          ])).toEqual([
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10
                    ]);
                expect(Kata_8$RescriptMonorepo.mergeArrays([
                            1,
                            3,
                            5,
                            7,
                            9,
                            11,
                            12
                          ], [
                            1,
                            2,
                            3,
                            4,
                            5,
                            10,
                            12
                          ])).toEqual([
                      1,
                      2,
                      3,
                      4,
                      5,
                      7,
                      9,
                      10,
                      11,
                      12
                    ]);
                
              }));
        
      }));

export {
  
}
/*  Not a pure module */
