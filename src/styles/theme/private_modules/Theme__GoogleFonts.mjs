// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function toWeightValue(weight) {
  if (weight === "v200") {
    return {
            weight: 200,
            isItalic: false
          };
  } else if (weight === "v300") {
    return {
            weight: 300,
            isItalic: false
          };
  } else if (weight === "v400") {
    return {
            weight: 400,
            isItalic: false
          };
  } else if (weight === "v500") {
    return {
            weight: 500,
            isItalic: false
          };
  } else if (weight === "v600") {
    return {
            weight: 600,
            isItalic: false
          };
  } else if (weight === "v700") {
    return {
            weight: 700,
            isItalic: false
          };
  } else if (weight === "v800") {
    return {
            weight: 800,
            isItalic: false
          };
  } else if (weight === "v900") {
    return {
            weight: 900,
            isItalic: false
          };
  } else if (weight === "italic100") {
    return {
            weight: 100,
            isItalic: true
          };
  } else if (weight === "italic200") {
    return {
            weight: 200,
            isItalic: true
          };
  } else if (weight === "italic300") {
    return {
            weight: 300,
            isItalic: true
          };
  } else if (weight === "italic400") {
    return {
            weight: 400,
            isItalic: true
          };
  } else if (weight === "italic500") {
    return {
            weight: 500,
            isItalic: true
          };
  } else if (weight === "italic600") {
    return {
            weight: 600,
            isItalic: true
          };
  } else if (weight === "italic700") {
    return {
            weight: 700,
            isItalic: true
          };
  } else if (weight === "italic800") {
    return {
            weight: 800,
            isItalic: true
          };
  } else if (weight === "italic900") {
    return {
            weight: 900,
            isItalic: true
          };
  } else {
    return {
            weight: 100,
            isItalic: false
          };
  }
}

function toArrayWeightValue(weightsArray) {
  return Belt_Array.map(weightsArray, toWeightValue);
}

function toFontValue2(font) {
  var variant = font.NAME;
  if (variant === "FrankRuhlLibre") {
    return {
            fontName: "Frank Ruhl Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CormorantGaramond") {
    return {
            fontName: "Cormorant Garamond",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "HindMadurai") {
    return {
            fontName: "Hind Madurai",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Varta") {
    return {
            fontName: "Varta",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooTammudu2") {
    return {
            fontName: "Baloo Tammudu 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Trispace") {
    return {
            fontName: "Trispace",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EncodeSansExpanded") {
    return {
            fontName: "Encode Sans Expanded",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "OpenSans") {
    return {
            fontName: "Open Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EncodeSansSemiExpanded") {
    return {
            fontName: "Encode Sans Semi Expanded",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Inconsolata") {
    return {
            fontName: "Inconsolata",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Grenze") {
    return {
            fontName: "Grenze",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "InriaSans") {
    return {
            fontName: "Inria Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "IBMPlexSerif") {
    return {
            fontName: "IBM Plex Serif",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSerifJP") {
    return {
            fontName: "Noto Serif JP",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSerifKR") {
    return {
            fontName: "Noto Serif KR",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSerifSC") {
    return {
            fontName: "Noto Serif SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSerifTC") {
    return {
            fontName: "Noto Serif TC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "FiraCode") {
    return {
            fontName: "Fira Code",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BarlowSemiCondensed") {
    return {
            fontName: "Barlow Semi Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ChakraPetch") {
    return {
            fontName: "Chakra Petch",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MuseoModerno") {
    return {
            fontName: "MuseoModerno",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Rajdhani") {
    return {
            fontName: "Rajdhani",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BaiJamjuree") {
    return {
            fontName: "Bai Jamjuree",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Imbue") {
    return {
            fontName: "Imbue",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Cormorant") {
    return {
            fontName: "Cormorant",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooBhai2") {
    return {
            fontName: "Baloo Bhai 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Texturina") {
    return {
            fontName: "Texturina",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Inter") {
    return {
            fontName: "Inter",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AveriaSerifLibre") {
    return {
            fontName: "Averia Serif Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSansHK") {
    return {
            fontName: "Noto Sans HK",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSansJP") {
    return {
            fontName: "Noto Sans JP",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSansKR") {
    return {
            fontName: "Noto Sans KR",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSansSC") {
    return {
            fontName: "Noto Sans SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NotoSansTC") {
    return {
            fontName: "Noto Sans HK",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Cabin") {
    return {
            fontName: "Cabin",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Cairo") {
    return {
            fontName: "Cairo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "InriaSerif") {
    return {
            fontName: "Inria Serif",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Nunito") {
    return {
            fontName: "Nunito",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "FiraSans") {
    return {
            fontName: "Fira Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CrimsonText") {
    return {
            fontName: "Crimson Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Chivo") {
    return {
            fontName: "Chivo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Gelasio") {
    return {
            fontName: "Gelasio",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MontserratAlternates") {
    return {
            fontName: "Montserrat Alternates",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Nobile") {
    return {
            fontName: "Nobile",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EncodeSansCondensed") {
    return {
            fontName: "Encode Sans Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BeVietnam") {
    return {
            fontName: "Be Vietnam",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Pridi") {
    return {
            fontName: "Pridi",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MartelSans") {
    return {
            fontName: "Martel Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "IBMPlexMono") {
    return {
            fontName: "IBM Plex Mono",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MuktaMahee") {
    return {
            fontName: "Mukta Mahee",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MuktaMalar") {
    return {
            fontName: "Mukta Malar",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Literata") {
    return {
            fontName: "Literata",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ExpletusSans") {
    return {
            fontName: "Expletus Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "WorkSans") {
    return {
            fontName: "Work Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Solway") {
    return {
            fontName: "Solway",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "TurretRoad") {
    return {
            fontName: "Turret Road",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "HindSiliguri") {
    return {
            fontName: "Hind Siliguri",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "IBMPlexSans") {
    return {
            fontName: "IBM Plex Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooDa2") {
    return {
            fontName: "Baloo Da 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "TitilliumWeb") {
    return {
            fontName: "Titillium Web",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Vollkorn") {
    return {
            fontName: "Vollkorn",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersStencilDisplay") {
    return {
            fontName: "Big Shoulders Stencil Display",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SourceCodePro") {
    return {
            fontName: "Source Code Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Fahkwang") {
    return {
            fontName: "Fahkwang",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Sansita") {
    return {
            fontName: "Sansita",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ComicNeue") {
    return {
            fontName: "Comic Neue",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Spartan") {
    return {
            fontName: "Spartan",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RobotoCondensed") {
    return {
            fontName: "Roboto Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ZillaSlab") {
    return {
            fontName: "Zilla Slab",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Archivo") {
    return {
            fontName: "Archivo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Prompt") {
    return {
            fontName: "Prompt",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "LibreFranklin") {
    return {
            fontName: "Libre Franklin",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Halant") {
    return {
            fontName: "Halant",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AveriaLibre") {
    return {
            fontName: "Averia Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Changa") {
    return {
            fontName: "Changa",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "PlayfairDisplay") {
    return {
            fontName: "Playfair Display",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Manrope") {
    return {
            fontName: "Manrope",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Spectral") {
    return {
            fontName: "Spectral",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "GothicA1") {
    return {
            fontName: "Gothic A1",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Quicksand") {
    return {
            fontName: "Quicksand",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Manuale") {
    return {
            fontName: "Manuale",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Assistant") {
    return {
            fontName: "Assistant",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CormorantUpright") {
    return {
            fontName: "Cormorant Upright",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Recursive") {
    return {
            fontName: "Recursive",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Martel") {
    return {
            fontName: "Martel",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Mulish") {
    return {
            fontName: "Mulish",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "KulimPark") {
    return {
            fontName: "Kulim Park",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CormorantUnicase") {
    return {
            fontName: "Cormorant Unicase",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Kanit") {
    return {
            fontName: "Kanit",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Karla") {
    return {
            fontName: "Karla",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Karma") {
    return {
            fontName: "Karma",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersStencilText") {
    return {
            fontName: "Big Shoulders Stencil Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooChettan2") {
    return {
            fontName: "Baloo Chettan 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Dosis") {
    return {
            fontName: "Dosis",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Cuprum") {
    return {
            fontName: "Cuprum",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Oxanium") {
    return {
            fontName: "Oxanium",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Roboto") {
    return {
            fontName: "Roboto",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Khand") {
    return {
            fontName: "Khand",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Khula") {
    return {
            fontName: "Khula",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ProzaLibre") {
    return {
            fontName: "Proza Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "HindGuntur") {
    return {
            fontName: "Hind Guntur",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Petrona") {
    return {
            fontName: "Petrona",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "IbarraRealNova") {
    return {
            fontName: "Ibarra Real Nova",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EncodeSans") {
    return {
            fontName: "Encode Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SairaExtraCondensed") {
    return {
            fontName: "Saira Extra Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MPLUS1p") {
    return {
            fontName: "M PLUS 1p",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RobotoMono") {
    return {
            fontName: "Roboto Mono",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Trirong") {
    return {
            fontName: "Trirong",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Kreon") {
    return {
            fontName: "Kreon",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SairaSemiCondensed") {
    return {
            fontName: "Saira Semi Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Eczar") {
    return {
            fontName: "Eczar",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Kufam") {
    return {
            fontName: "Kufam",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RobotoSlab") {
    return {
            fontName: "Roboto Slab",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersInlineDisplay") {
    return {
            fontName: "Big Shoulders Inline Display",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RedRose") {
    return {
            fontName: "Red Rose",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooPaaji2") {
    return {
            fontName: "Baloo Paaji 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "HindVadodara") {
    return {
            fontName: "Hind Vadodara",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "PlayfairDisplaySC") {
    return {
            fontName: "Playfair Display SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Exo") {
    return {
            fontName: "Exo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AsapCondensed") {
    return {
            fontName: "Asap Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "K2D") {
    return {
            fontName: "K2D",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Merriweather") {
    return {
            fontName: "Merriweather",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Laila") {
    return {
            fontName: "Laila",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Rubik") {
    return {
            fontName: "Rubik",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Catamaran") {
    return {
            fontName: "Catamaran",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Baloo2") {
    return {
            fontName: "Baloo 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AveriaSansLibre") {
    return {
            fontName: "Averia Sans Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SpaceGrotesk") {
    return {
            fontName: "Space Grotesk",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SansitaSwashed") {
    return {
            fontName: "Sansita Swashed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooThambi2") {
    return {
            fontName: "Baloo Thambi 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Cinzel") {
    return {
            fontName: "Cinzel",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersDisplay") {
    return {
            fontName: "Big Shoulders Display",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Yantramanav") {
    return {
            fontName: "Yantramanav",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BarlowCondensed") {
    return {
            fontName: "Barlow Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "HeptaSlab") {
    return {
            fontName: "Hepta Slab",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Barlow") {
    return {
            fontName: "Barlow",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Saira") {
    return {
            fontName: "Saira",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Niramit") {
    return {
            fontName: "Niramit",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EBGaramond") {
    return {
            fontName: "EB Garamond",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MuktaVaani") {
    return {
            fontName: "Mukta Vaani",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Palanquin") {
    return {
            fontName: "Palanquin",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Maitree") {
    return {
            fontName: "Maitree",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Athiti") {
    return {
            fontName: "Athiti",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Alegreya") {
    return {
            fontName: "Alegreya",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Raleway") {
    return {
            fontName: "Raleway",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BodoniModa") {
    return {
            fontName: "Bodoni Moda",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SpectralSC") {
    return {
            fontName: "Spectral SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "JosefinSans") {
    return {
            fontName: "Josefin Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "JosefinSlab") {
    return {
            fontName: "Josefin Slab",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Signika") {
    return {
            fontName: "Signika",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "InknutAntiqua") {
    return {
            fontName: "Inknut Antiqua",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SairaCondensed") {
    return {
            fontName: "Saira Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Kodchasan") {
    return {
            fontName: "Kodchasan",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Epilogue") {
    return {
            fontName: "Epilogue",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Bellota") {
    return {
            fontName: "Bellota",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MavenPro") {
    return {
            fontName: "Maven Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RedHatDisplay") {
    return {
            fontName: "Red Hat Display",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Rokkitt") {
    return {
            fontName: "Rokkitt",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Tomorrow") {
    return {
            fontName: "Tomorrow",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AdventPro") {
    return {
            fontName: "Advent Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Tillana") {
    return {
            fontName: "Tillana",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooBhaina2") {
    return {
            fontName: "Baloo Bhaina 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Fraunces") {
    return {
            fontName: "Fraunces",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CormorantInfant") {
    return {
            fontName: "Cormorant Infant",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "IBMPlexSansCondensed") {
    return {
            fontName: "IBM Plex Sans Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CrimsonPro") {
    return {
            fontName: "Crimson Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Orbitron") {
    return {
            fontName: "Orbitron",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Oswald") {
    return {
            fontName: "Oswald",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ArimaMadurai") {
    return {
            fontName: "Arima Madurai",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AlegreyaSansSC") {
    return {
            fontName: "Alegreya Sans SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AlegreyaSans") {
    return {
            fontName: "Alegreya Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Overlock") {
    return {
            fontName: "Overlock",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Sarpanch") {
    return {
            fontName: "Sarpanch",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersText") {
    return {
            fontName: "Big Shoulders Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BalooTamma2") {
    return {
            fontName: "Baloo Tamma 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Overpass") {
    return {
            fontName: "Overpass",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "JetBrainsMono") {
    return {
            fontName: "JetBrains Mono",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SourceSerifPro") {
    return {
            fontName: "Source Serif Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "NunitoSans") {
    return {
            fontName: "Nunito Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "PublicSans") {
    return {
            fontName: "Public Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Mukta") {
    return {
            fontName: "Mukta",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Commissioner") {
    return {
            fontName: "Commissioner",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "CormorantSC") {
    return {
            fontName: "Cormorant SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Taviraj") {
    return {
            fontName: "Taviraj",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "YanoneKaffeesatz") {
    return {
            fontName: "Yanone Kaffeesatz",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Neuton") {
    return {
            fontName: "Neuton",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Blinker") {
    return {
            fontName: "Blinker",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Bitter") {
    return {
            fontName: "Bitter",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "RedHatText") {
    return {
            fontName: "Red Hat Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Livvic") {
    return {
            fontName: "Livvic",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Montserrat") {
    return {
            fontName: "Montserrat",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Poppins") {
    return {
            fontName: "Poppins",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MerriweatherSans") {
    return {
            fontName: "Merriweather Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Biryani") {
    return {
            fontName: "Biryani",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Sarabun") {
    return {
            fontName: "Sarabun",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Grandstander") {
    return {
            fontName: "Grandstander",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AlegreyaSC") {
    return {
            fontName: "Alegreya SC",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "FiraSansExtraCondensed") {
    return {
            fontName: "Fira Sans Extra Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "GrenzeGotisch") {
    return {
            fontName: "Grenze Gotisch",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Lemonada") {
    return {
            fontName: "Lemonada",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BioRhyme") {
    return {
            fontName: "BioRhyme",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Rosario") {
    return {
            fontName: "Rosario",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Aleo") {
    return {
            fontName: "Aleo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Asap") {
    return {
            fontName: "Asap",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Atma") {
    return {
            fontName: "Atma",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "AbhayaLibre") {
    return {
            fontName: "Abhaya Libre",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Exo2") {
    return {
            fontName: "Exo 2",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Hind") {
    return {
            fontName: "Hind",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "DarkerGrotesque") {
    return {
            fontName: "Darker Grotesque",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BellotaText") {
    return {
            fontName: "Bellota Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "ArchivoNarrow") {
    return {
            fontName: "Archivo Narrow",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "SourceSansPro") {
    return {
            fontName: "Source Sans Pro",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Jost") {
    return {
            fontName: "Jost",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Faustina") {
    return {
            fontName: "Faustina",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Jura") {
    return {
            fontName: "Jura",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "FiraSansCondensed") {
    return {
            fontName: "Fira Sans Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "KoHo") {
    return {
            fontName: "KoHo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Krub") {
    return {
            fontName: "Krub",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Lato") {
    return {
            fontName: "Lato",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Lora") {
    return {
            fontName: "Lora",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "MPLUSRounded1c") {
    return {
            fontName: "M PLUS Rounded 1c",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Mada") {
    return {
            fontName: "Mada",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Mali") {
    return {
            fontName: "Mali",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Mitr") {
    return {
            fontName: "Mitr",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "BigShouldersInlineText") {
    return {
            fontName: "Big Shoulders Inline Text",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Comfortaa") {
    return {
            fontName: "Comfortaa",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Chathura") {
    return {
            fontName: "Chathura",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Rasa") {
    return {
            fontName: "Rasa",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Ruda") {
    return {
            fontName: "Ruda",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Tajawal") {
    return {
            fontName: "Tajawal",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Sora") {
    return {
            fontName: "Sora",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Syne") {
    return {
            fontName: "Syne",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Ubuntu") {
    return {
            fontName: "Ubuntu",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Teko") {
    return {
            fontName: "Teko",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Heebo") {
    return {
            fontName: "Heebo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Arimo") {
    return {
            fontName: "Arimo",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "DMMono") {
    return {
            fontName: "DM Mono",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "EncodeSansSemiCondensed") {
    return {
            fontName: "Encode Sans Semi Condensed",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Yrsa") {
    return {
            fontName: "Yrsa",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Podkova") {
    return {
            fontName: "Podkova",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "DMSans") {
    return {
            fontName: "DM Sans",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else if (variant === "Piazolla") {
    return {
            fontName: "Piazolla",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  } else {
    return {
            fontName: "BioRhyme Expanded",
            weights: Belt_Array.map(font.VAL, toWeightValue)
          };
  }
}

function toFontValues(fonts) {
  return Belt_Array.map(fonts, toFontValue2);
}

export {
  toWeightValue ,
  toArrayWeightValue ,
  toFontValue2 ,
  toFontValues ,
  
}
/* No side effect */
