// Generated by ReScript, PLEASE EDIT WITH CARE


function declaration(property, value) {
  return property + ": " + value + ";";
}

function toGlobalValues(globalValues) {
  if (globalValues === "unset") {
    return "unset";
  } else if (globalValues === "inherit") {
    return "inherit";
  } else {
    return "initial";
  }
}

function toBaselinePosition(baselinePosition) {
  if (baselinePosition === "firstBaseline") {
    return "first baseline";
  } else if (baselinePosition === "baseline") {
    return "baseline";
  } else {
    return "last baseline";
  }
}

function toContentDistribution(contentDistribution) {
  if (contentDistribution === "spaceAround") {
    return "space-around";
  } else if (contentDistribution === "stretch") {
    return "stretch";
  } else if (contentDistribution === "spaceBetween") {
    return "space-between";
  } else {
    return "space-evenly";
  }
}

function toContentPosition(contentPosition) {
  if (contentPosition === "start") {
    return "start";
  } else if (contentPosition === "center") {
    return "center";
  } else if (contentPosition === "flexStart") {
    return "flex-start";
  } else if (contentPosition === "flexEnd") {
    return "flex-end";
  } else {
    return "end";
  }
}

function toSelfPosition(selfPosition) {
  if (selfPosition === "selfEnd") {
    return "self-end";
  } else if (selfPosition === "start") {
    return "start";
  } else if (selfPosition === "center") {
    return "center";
  } else if (selfPosition === "flexStart") {
    return "flex-start";
  } else if (selfPosition === "flexEnd") {
    return "flex-end";
  } else if (selfPosition === "selfStart") {
    return "self-start";
  } else {
    return "end";
  }
}

function toValue(value) {
  if (value === "initial") {
    return "initial";
  } else if (value === "safe") {
    return "safe";
  } else if (value === "spaceAround") {
    return "space-around";
  } else if (value === "unsafe") {
    return "unsafe";
  } else if (value === "lastBaseline") {
    return "last baseline";
  } else if (value === "stretch") {
    return "stretch";
  } else if (value === "end") {
    return "end";
  } else if (value === "start") {
    return "start";
  } else if (value === "center") {
    return "center";
  } else if (value === "firstBaseline") {
    return "first baseline";
  } else if (value === "baseline") {
    return "baseline";
  } else if (value === "spaceBetween") {
    return "space-between";
  } else if (value === "unset") {
    return "unset";
  } else if (value === "flexStart") {
    return "flex-start";
  } else if (value === "inherit") {
    return "inherit";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "flexEnd") {
    return "flex-end";
  } else {
    return "space-evenly";
  }
}

var AlignContent = {
  toValue: toValue
};

function toValue$1(value) {
  if (value === "safe") {
    return "safe";
  } else if (value === "unsafe") {
    return "unsafe";
  } else if (value === "lastBaseline") {
    return "last baseline";
  } else if (value === "stretch") {
    return "stretch";
  } else if (value === "end") {
    return "end";
  } else if (value === "selfEnd") {
    return "self-end";
  } else if (value === "start") {
    return "start";
  } else if (value === "center") {
    return "center";
  } else if (value === "firstBaseline") {
    return "first baseline";
  } else if (value === "baseline") {
    return "baseline";
  } else if (value === "unset") {
    return "unset";
  } else if (value === "flexStart") {
    return "flex-start";
  } else if (value === "inherit") {
    return "inherit";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "flexEnd") {
    return "flex-end";
  } else if (value === "selfStart") {
    return "self-start";
  } else {
    return "initial";
  }
}

var AlignItems = {
  toValue: toValue$1
};

var AlignSelf = {};

var All = {};

function toAngle(angle) {
  if (angle === "turn") {
    return "turn";
  } else if (angle === "deg") {
    return "deg";
  } else if (angle === "rad") {
    return "rad";
  } else {
    return "grad";
  }
}

var Angle = {
  toAngle: toAngle
};

function toValue$2(value) {
  if (value === "ms") {
    return "ms";
  } else {
    return "s";
  }
}

var Time = {
  toValue: toValue$2
};

function toValue$3(value) {
  if (value === "alternateReverse") {
    return "alternate-reverse";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "alternate") {
    return "alternate";
  } else {
    return "reverse";
  }
}

var SingleAnimationDirection = {
  toValue: toValue$3
};

function toValue$4(value) {
  if (value === "paused") {
    return "paused";
  } else {
    return "running";
  }
}

var AnimationPlayState = {
  toValue: toValue$4
};

function toValue$5(value) {
  if (value === "none") {
    return "none";
  } else if (value === "backwards") {
    return "backwards";
  } else if (value === "forwards") {
    return "forwards";
  } else {
    return "both";
  }
}

var SingleAnimationFillMode = {
  toValue: toValue$5
};

function toValue$6(value) {
  if (typeof value === "object") {
    return String(Math.abs(value.VAL));
  } else {
    return "infinite";
  }
}

var SingleAnimationIterationCount = {
  toValue: toValue$6
};

var AnimationTimingFunction = {};

function toValue$7(value) {
  if (typeof value === "object") {
    return value.VAL;
  } else {
    return "none";
  }
}

var AnimationName = {
  toValue: toValue$7
};

function alignContent(value) {
  return declaration("align-content", toValue(value));
}

function alignItems(value) {
  return declaration("align-items", toValue(value));
}

function animationDelay(time) {
  return declaration("animation-delay", toValue$2(time));
}

export {
  declaration ,
  toGlobalValues ,
  toBaselinePosition ,
  toContentDistribution ,
  toContentPosition ,
  toSelfPosition ,
  AlignContent ,
  AlignItems ,
  AlignSelf ,
  All ,
  Angle ,
  Time ,
  SingleAnimationDirection ,
  AnimationPlayState ,
  SingleAnimationFillMode ,
  SingleAnimationIterationCount ,
  AnimationTimingFunction ,
  AnimationName ,
  alignContent ,
  alignItems ,
  animationDelay ,
  
}
/* No side effect */
