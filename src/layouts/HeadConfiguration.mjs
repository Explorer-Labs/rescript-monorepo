// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Utils$RescriptMonorepo from "../utils/Utils.mjs";
import * as Theme__GoogleFonts$RescriptMonorepo from "../styles/theme/private_modules/Theme__GoogleFonts.mjs";

function hasItalics(weights) {
  if (Belt_Array.some(weights, (function (a) {
            return a.isItalic === true;
          }))) {
    return {
            prefix: ":ital,",
            normalPrefix: "0,",
            italicPrefix: "1,"
          };
  } else {
    return {
            prefix: ":",
            normalPrefix: "",
            italicPrefix: ""
          };
  }
}

function weightPrefix(param, normalPrefix, italicPrefix) {
  return (
          param.isItalic ? italicPrefix : normalPrefix
        ) + String(param.weight) + ";";
}

function generateWeights(normalPrefixOpt, italicPrefixOpt, weights) {
  var normalPrefix = normalPrefixOpt !== undefined ? normalPrefixOpt : "";
  var italicPrefix = italicPrefixOpt !== undefined ? italicPrefixOpt : "";
  return Belt_Array.reduce(weights, "", (function (acc, value) {
                  return acc + weightPrefix(value, normalPrefix, italicPrefix);
                })).slice(0, -1);
}

function linkFontName(fontString) {
  return fontString.replace(/ /g, "+");
}

function createFontFamily(fontName, weights) {
  var match = hasItalics(weights);
  return "family=" + linkFontName(fontName) + match.prefix + "wght@" + generateWeights(match.normalPrefix, match.italicPrefix, weights) + "&";
}

function createFontFamilies(fontFamilies) {
  return Belt_Array.reduce(fontFamilies, "", (function (acc, font) {
                return acc + createFontFamily(font.fontName, font.weights);
              }));
}

function generateLink(fontFamilies) {
  return "https://fonts.googleapis.com/css2?" + createFontFamilies(fontFamilies) + "display=swap";
}

var GenerateLink = {
  hasItalics: hasItalics,
  weightPrefix: weightPrefix,
  generateWeights: generateWeights,
  linkFontName: linkFontName,
  createFontFamily: createFontFamily,
  createFontFamilies: createFontFamilies,
  generateLink: generateLink
};

function HeadConfiguration(Props) {
  var children = Props.children;
  var fontsOpt = Props.fonts;
  var titleOpt = Props.title;
  var fonts = fontsOpt !== undefined ? fontsOpt : [
      {
        NAME: "AlegreyaSans",
        VAL: ["v400"]
      },
      {
        NAME: "CrimsonPro",
        VAL: [
          "v200",
          "italic200",
          "italic300"
        ]
      },
      {
        NAME: "JetBrainsMono",
        VAL: ["v800"]
      }
    ];
  var title = titleOpt !== undefined ? titleOpt : "Page Title";
  var fontFamilies = Theme__GoogleFonts$RescriptMonorepo.toFontValues(fonts);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: null
                }, React.createElement("media", {
                      content: "width=device-width, initial-sacle=1.0",
                      name: "viewport"
                    }), React.createElement("title", undefined, Utils$RescriptMonorepo.str(title)), React.createElement("link", {
                      href: "https://fonts.gstatic.com",
                      rel: "preconnect"
                    }), React.createElement("link", {
                      href: generateLink(fontFamilies),
                      rel: "stylesheet"
                    })), children);
}

var make = HeadConfiguration;

export {
  GenerateLink ,
  make ,
  
}
/* react Not a pure module */
